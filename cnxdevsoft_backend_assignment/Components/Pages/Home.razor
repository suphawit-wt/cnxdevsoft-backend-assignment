@page "/"
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text.Json.Serialization
@using cnxdevsoft_backend_assignment.Models
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<PageTitle>Math Operation</PageTitle>

<div class="container mt-3">
    <h1>Math Operation</h1>

    <div class="row">
        <div class="col-lg-4 col-md-6 col-sm-12">
            <EditForm Model="@mathOperation" OnValidSubmit="CreateMathOperation" FormName="mathOpsCreate">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label for="X" class="form-label">X</label>
                    <InputNumber @bind-Value="mathOperation.X" class="form-control"/>
                    <ValidationMessage For="@(() => mathOperation.X)"></ValidationMessage>
                </div>
                <div class="mb-3">
                    <label for="Operator" class="form-label">Operator</label>
                    <InputSelect @bind-Value="mathOperation.Operator" class="form-select">
                        <option>Please select operator.</option>
                        <option value="add">+</option>
                        <option value="sub">-</option>
                        <option value="mul">*</option>
                        <option value="div">/</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => mathOperation.Operator)"></ValidationMessage>
                </div>
                <div class="mb-3">
                    <label for="Y" class="form-label">Y</label>
                    <InputNumber @bind-Value="mathOperation.Y" class="form-control" />
                    <ValidationMessage For="@(() => mathOperation.Y)"></ValidationMessage>
                </div>
                <button class="btn btn-primary btn-md" type="submit">Calculate</button>
            </EditForm>
        </div>
    </div>

    <div class="row mt-3">
        <h3>Result:</h3>

        <div class="col-lg-4 col-md-6 col-sm-12">
            @if (mathOperations is null)
            {
                <p>Unable to get Math Operations in Database.</p>
            }
            else {
                @foreach (var mathOp in mathOperations)
                {
                    string operatorSymbol = "";

                    if (mathOp.Operator == "add")
                    {
                        operatorSymbol = "+";
                    }
                    else if (mathOp.Operator == "sub")
                    {
                        operatorSymbol = "-";
                    }
                    else if (mathOp.Operator == "mul")
                    {
                        operatorSymbol = "*";
                    }
                    else if (mathOp.Operator == "div")
                    {
                        operatorSymbol = "/";
                    }

                    <div class="alert alert-primary" role="alert">
                        @mathOp.X @operatorSymbol @mathOp.Y = @mathOp.Result
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    MathOperation mathOperation = new();

    private List<MathOperation> mathOperations = new();

    protected override async Task OnInitializedAsync()
    {
        mathOperations = await httpClient.GetFromJsonAsync<List<MathOperation>>("https://localhost:7171/api/math") ?? new List<MathOperation>();
    }

    private async Task CreateMathOperation()
    {
        await httpClient.PostAsJsonAsync<MathOperation>("https://localhost:7171/api/math", mathOperation);
        navigationManager.NavigateTo(navigationManager.Uri, forceLoad: true);
    }
}